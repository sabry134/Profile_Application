{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ProfileScreen from \"./Profile\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nfunction HomeScreen(_ref) {\n  var _ref2;\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    userData = _useState6[0],\n    setUserData = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    userExists = _useState8[0],\n    setUserExists = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    searchPressed = _useState10[0],\n    setSearchPressed = _useState10[1];\n  var isRequesting = useRef(false);\n  var handleSearch = function handleSearch() {\n    return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n      if (!username || isRequesting.current) return;\n      isRequesting.current = true;\n      setLoading(true);\n      try {\n        var response = yield fetch(`https://ratings.tankionline.com/api/eu/profile/?user=${username}`);\n        var data = yield response.json();\n        if (data.response !== null && data.responseType === 'OK') {\n          setUserData(data.response);\n          setUserExists(true);\n        } else {\n          setUserExists(false);\n          setUserData(null);\n        }\n      } catch (error) {\n        setUserExists(false);\n        setUserData(null);\n      } finally {\n        setLoading(false);\n        isRequesting.current = false;\n        setSearchPressed(true);\n      }\n    })).apply(this, arguments);\n  };\n  var handleUsernameChange = function handleUsernameChange(text) {\n    setUsername(text);\n    if (!text) {\n      setUserExists(false);\n      setSearchPressed(false);\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Profile Page\"\n    }), _jsx(TextInput, {\n      placeholder: \"Enter username\",\n      style: [styles.input, {\n        marginBottom: 20\n      }],\n      onChangeText: handleUsernameChange,\n      value: username\n    }), _jsx(Button, {\n      title: \"Search\",\n      onPress: handleSearch\n    }), loading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\"\n    }) : userExists && searchPressed ? _jsxs(TouchableOpacity, {\n      style: styles.profileContainer,\n      onPress: function onPress() {\n        return navigation.navigate('Profile', {\n          userData: userData\n        });\n      },\n      children: [_jsx(Image, {\n        source: {\n          uri: 'https://media.discordapp.net/attachments/604484924946251778/670310899344474122/unknown.png'\n        },\n        style: styles.profileImage\n      }), _jsx(Text, {\n        style: styles.nickname,\n        children: userData == null ? void 0 : userData.name\n      })]\n    }) : null, userExists === false && searchPressed ? _jsx(Text, {\n      style: styles.errorText,\n      children: \"This user does not exist\"\n    }) : null, _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Home\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Home\",\n        component: HomeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Profile\",\n        component: ProfileScreen\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 20\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    padding: 8,\n    width: 200\n  },\n  profileContainer: {\n    alignItems: 'center',\n    backgroundColor: 'black',\n    padding: 10,\n    borderRadius: 10,\n    marginTop: 40\n  },\n  profileImage: {\n    width: 100,\n    height: 100,\n    resizeMode: 'contain',\n    marginBottom: 10\n  },\n  nickname: {\n    color: 'white'\n  },\n  errorText: {\n    color: 'red',\n    marginTop: 20\n  }\n});","map":{"version":3,"names":["React","useState","useRef","StatusBar","NavigationContainer","createStackNavigator","StyleSheet","Text","View","TextInput","Button","ActivityIndicator","Image","TouchableOpacity","ProfileScreen","jsx","_jsx","jsxs","_jsxs","Stack","HomeScreen","_ref","_ref2","navigation","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","loading","setLoading","_useState5","_useState6","userData","setUserData","_useState7","_useState8","userExists","setUserExists","_useState9","_useState10","searchPressed","setSearchPressed","isRequesting","handleSearch","_asyncToGenerator","current","response","fetch","data","json","responseType","error","apply","arguments","handleUsernameChange","text","style","styles","container","children","title","placeholder","input","marginBottom","onChangeText","value","onPress","size","color","profileContainer","navigate","source","uri","profileImage","nickname","name","errorText","App","Navigator","initialRouteName","Screen","component","create","flex","backgroundColor","alignItems","justifyContent","fontSize","borderWidth","borderColor","padding","width","borderRadius","marginTop","height","resizeMode"],"sources":["/home/aurelien/Autre/Mobile App/Profile_Application/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  Button,\n  ActivityIndicator,\n  Image,\n  TouchableOpacity, // Import TouchableOpacity for handling profile clicks\n} from 'react-native';\nimport ProfileScreen from './Profile'; \n\nconst Stack = createStackNavigator();\n\nfunction HomeScreen({ navigation }) {\n  const [username, setUsername] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState(null);\n  const [userExists, setUserExists] = useState(false); // Initialize as false\n  const [searchPressed, setSearchPressed] = useState(false); // Track if the \"Search\" button was pressed\n  const isRequesting = useRef(false);\n\n  const handleSearch = async () => {\n    if (!username || isRequesting.current) return;\n\n    isRequesting.current = true;\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `https://ratings.tankionline.com/api/eu/profile/?user=${username}`\n      );\n      const data = await response.json();\n\n      if (data.response !== null && data.responseType === 'OK') {\n        setUserData(data.response);\n        setUserExists(true); // User exists\n      } else {\n        setUserExists(false); // User does not exist\n        setUserData(null);\n      }\n    } catch (error) {\n      setUserExists(false); // User does not exist\n      setUserData(null);\n    } finally {\n      setLoading(false);\n      isRequesting.current = false;\n      setSearchPressed(true); // Mark that the \"Search\" button was pressed\n    }\n  };\n\n  // Handle when the username is changed\n  const handleUsernameChange = (text) => {\n    setUsername(text);\n    if (!text) {\n      // If the username is empty, reset the userExists state\n      setUserExists(false);\n      setSearchPressed(false); // Also reset the searchPressed state\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Profile Page</Text>\n      <TextInput\n        placeholder=\"Enter username\"\n        style={[styles.input, { marginBottom: 20 }]}\n        onChangeText={handleUsernameChange} // Use the custom handler\n        value={username}\n      />\n      <Button title=\"Search\" onPress={handleSearch} />\n      {loading ? (\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      ) : userExists && searchPressed ? (\n        // Check if the user exists and \"Search\" button was pressed\n        <TouchableOpacity\n          style={styles.profileContainer}\n          onPress={() => navigation.navigate('Profile', { userData })}\n        >\n          <Image\n            source={{\n              uri:\n                'https://media.discordapp.net/attachments/604484924946251778/670310899344474122/unknown.png',\n            }}\n            style={styles.profileImage}\n          />\n          <Text style={styles.nickname}>{userData?.name}</Text>\n        </TouchableOpacity>\n      ) : null}\n      {userExists === false && searchPressed ? (\n        // Display error message when user does not exist and \"Search\" button was pressed\n        <Text style={styles.errorText}>This user does not exist</Text>\n      ) : null}\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 20,\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    padding: 8,\n    width: 200,\n  },\n  profileContainer: {\n    alignItems: 'center',\n    backgroundColor: 'black',\n    padding: 10,\n    borderRadius: 10,\n    marginTop: 40,\n  },\n  profileImage: {\n    width: 100,\n    height: 100,\n    resizeMode: 'contain',\n    marginBottom: 10,\n  },\n  nickname: {\n    color: 'white',\n  },\n  errorText: {\n    color: 'red', // Display the error message in red\n    marginTop: 20,\n  },\n});\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,iBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,gBAAA;AAW/D,OAAOC,aAAa;AAAkB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEtC,IAAMC,KAAK,GAAGd,oBAAoB,CAAC,CAAC;AAEpC,SAASe,UAAUA,CAAAC,IAAA,EAAiB;EAAA,IAAAC,KAAA;EAAA,IAAdC,UAAU,GAAAF,IAAA,CAAVE,UAAU;EAC9B,IAAAC,SAAA,GAAgCvB,QAAQ,CAAC,EAAE,CAAC;IAAAwB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5B,IAAAI,UAAA,GAA8B5B,QAAQ,CAAC,KAAK,CAAC;IAAA6B,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAtCE,OAAO,GAAAD,UAAA;IAAEE,UAAU,GAAAF,UAAA;EAC1B,IAAAG,UAAA,GAAgChC,QAAQ,CAAC,IAAI,CAAC;IAAAiC,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAvCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAAoCpC,QAAQ,CAAC,KAAK,CAAC;IAAAqC,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAA5CE,UAAU,GAAAD,UAAA;IAAEE,aAAa,GAAAF,UAAA;EAChC,IAAAG,UAAA,GAA0CxC,QAAQ,CAAC,KAAK,CAAC;IAAAyC,WAAA,GAAAhB,cAAA,CAAAe,UAAA;IAAlDE,aAAa,GAAAD,WAAA;IAAEE,gBAAgB,GAAAF,WAAA;EACtC,IAAMG,YAAY,GAAG3C,MAAM,CAAC,KAAK,CAAC;EAElC,IAAM4C,YAAY,YAAZA,YAAYA,CAAA;IAAA,QAAAxB,KAAA,GAAAA,KAAA,IAAAyB,iBAAA,CAAG,aAAY;MAC/B,IAAI,CAACpB,QAAQ,IAAIkB,YAAY,CAACG,OAAO,EAAE;MAEvCH,YAAY,CAACG,OAAO,GAAG,IAAI;MAC3BhB,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,IAAMiB,QAAQ,SAASC,KAAK,CACzB,wDAAuDvB,QAAS,EACnE,CAAC;QACD,IAAMwB,IAAI,SAASF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,CAACF,QAAQ,KAAK,IAAI,IAAIE,IAAI,CAACE,YAAY,KAAK,IAAI,EAAE;UACxDjB,WAAW,CAACe,IAAI,CAACF,QAAQ,CAAC;UAC1BT,aAAa,CAAC,IAAI,CAAC;QACrB,CAAC,MAAM;UACLA,aAAa,CAAC,KAAK,CAAC;UACpBJ,WAAW,CAAC,IAAI,CAAC;QACnB;MACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACdd,aAAa,CAAC,KAAK,CAAC;QACpBJ,WAAW,CAAC,IAAI,CAAC;MACnB,CAAC,SAAS;QACRJ,UAAU,CAAC,KAAK,CAAC;QACjBa,YAAY,CAACG,OAAO,GAAG,KAAK;QAC5BJ,gBAAgB,CAAC,IAAI,CAAC;MACxB;IACF,CAAC,GAAAW,KAAA,OAAAC,SAAA;EAAA;EAGD,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,IAAI,EAAK;IACrC9B,WAAW,CAAC8B,IAAI,CAAC;IACjB,IAAI,CAACA,IAAI,EAAE;MAETlB,aAAa,CAAC,KAAK,CAAC;MACpBI,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC;EAED,OACE1B,KAAA,CAACV,IAAI;IAACmD,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5B9C,IAAA,CAACT,IAAI;MAACoD,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAD,QAAA,EAAC;IAAY,CAAM,CAAC,EAC9C9C,IAAA,CAACP,SAAS;MACRuD,WAAW,EAAC,gBAAgB;MAC5BL,KAAK,EAAE,CAACC,MAAM,CAACK,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAG,CAAC,CAAE;MAC5CC,YAAY,EAAEV,oBAAqB;MACnCW,KAAK,EAAEzC;IAAS,CACjB,CAAC,EACFX,IAAA,CAACN,MAAM;MAACqD,KAAK,EAAC,QAAQ;MAACM,OAAO,EAAEvB;IAAa,CAAE,CAAC,EAC/Cf,OAAO,GACNf,IAAA,CAACL,iBAAiB;MAAC2D,IAAI,EAAC,OAAO;MAACC,KAAK,EAAC;IAAS,CAAE,CAAC,GAChDhC,UAAU,IAAII,aAAa,GAE7BzB,KAAA,CAACL,gBAAgB;MACf8C,KAAK,EAAEC,MAAM,CAACY,gBAAiB;MAC/BH,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAM9C,UAAU,CAACkD,QAAQ,CAAC,SAAS,EAAE;UAAEtC,QAAQ,EAARA;QAAS,CAAC,CAAC;MAAA,CAAC;MAAA2B,QAAA,GAE5D9C,IAAA,CAACJ,KAAK;QACJ8D,MAAM,EAAE;UACNC,GAAG,EACD;QACJ,CAAE;QACFhB,KAAK,EAAEC,MAAM,CAACgB;MAAa,CAC5B,CAAC,EACF5D,IAAA,CAACT,IAAI;QAACoD,KAAK,EAAEC,MAAM,CAACiB,QAAS;QAAAf,QAAA,EAAE3B,QAAQ,oBAARA,QAAQ,CAAE2C;MAAI,CAAO,CAAC;IAAA,CACrC,CAAC,GACjB,IAAI,EACPvC,UAAU,KAAK,KAAK,IAAII,aAAa,GAEpC3B,IAAA,CAACT,IAAI;MAACoD,KAAK,EAAEC,MAAM,CAACmB,SAAU;MAAAjB,QAAA,EAAC;IAAwB,CAAM,CAAC,GAC5D,IAAI,EACR9C,IAAA,CAACb,SAAS;MAACwD,KAAK,EAAC;IAAM,CAAE,CAAC;EAAA,CACtB,CAAC;AAEX;AAGA,eAAe,SAASqB,GAAGA,CAAA,EAAG;EAC5B,OACEhE,IAAA,CAACZ,mBAAmB;IAAA0D,QAAA,EAClB5C,KAAA,CAACC,KAAK,CAAC8D,SAAS;MAACC,gBAAgB,EAAC,MAAM;MAAApB,QAAA,GACtC9C,IAAA,CAACG,KAAK,CAACgE,MAAM;QAACL,IAAI,EAAC,MAAM;QAACM,SAAS,EAAEhE;MAAW,CAAE,CAAC,EACnDJ,IAAA,CAACG,KAAK,CAACgE,MAAM;QAACL,IAAI,EAAC,SAAS;QAACM,SAAS,EAAEtE;MAAc,CAAE,CAAC;IAAA,CAC1C;EAAC,CACC,CAAC;AAE1B;AAEA,IAAM8C,MAAM,GAAGtD,UAAU,CAAC+E,MAAM,CAAC;EAC/BxB,SAAS,EAAE;IACTyB,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACD1B,KAAK,EAAE;IACL2B,QAAQ,EAAE,EAAE;IACZxB,YAAY,EAAE;EAChB,CAAC;EACDD,KAAK,EAAE;IACL0B,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,MAAM;IACnBC,OAAO,EAAE,CAAC;IACVC,KAAK,EAAE;EACT,CAAC;EACDtB,gBAAgB,EAAE;IAChBgB,UAAU,EAAE,QAAQ;IACpBD,eAAe,EAAE,OAAO;IACxBM,OAAO,EAAE,EAAE;IACXE,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE;EACb,CAAC;EACDpB,YAAY,EAAE;IACZkB,KAAK,EAAE,GAAG;IACVG,MAAM,EAAE,GAAG;IACXC,UAAU,EAAE,SAAS;IACrBhC,YAAY,EAAE;EAChB,CAAC;EACDW,QAAQ,EAAE;IACRN,KAAK,EAAE;EACT,CAAC;EACDQ,SAAS,EAAE;IACTR,KAAK,EAAE,KAAK;IACZyB,SAAS,EAAE;EACb;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}